from flask import Flask, request  # дока фласка: https://flask.palletsprojects.com/en/2.1.x/

# Создаём экземпляр класса Flask для управления фреймворком.
app = Flask(__name__)

# Возможные ответы пользователя и их синонимы.
questions = {
    "о навыке": ["для чего ты", "кто ты", "что умеешь", "что", "о навыке"]
}


# Отправляем пост-запрос на сервер, с целью отображения контента.
# За это отвечает декоратор
@app.route("/alice", methods=["POST"])
def main_controller():
    req = request.json.get("request", {}).get("command")  # получаем текст, напечатанный пользователем

    # Документацию к запросам и ответам найдёшь на https://yandex.ru/dev/dialogs/alice/doc/
    resp = {
            "response": {
                "text": "",
                "end_session": False
            },
            "version": "1.0"
        }

    # Если текст, введённый пользователем, совпадает с вариантом ответа или его синонимами, то присваеваем переменнной
    # с ответом соответствующий json файл.
    if req in questions["о навыке"]:
        resp = Answers.hello()  # Вызываем метод hello(), возвращающий нам ответ-приветствие.
    return resp  # отправляем ответ пользователю


class Answers:

    """Этот класс хранит в себе все возможные ответы нашего приложения пользователю."""

    @staticmethod  # Этот декоратор делает метод статическим, т.е. его можно вызывать без экземпляра класса.
    def hello():
        resp = {
            "response": {
                "text": "Приветствую! Это мой новый навык, который позволит вам окунуться "
                        "в мир невероятных фэнтезийных приключений.",
                "end_session": False
            },
            "version": "1.0"
        }
        return resp  # отправляем ответ сервера


app.run("0.0.0.0", port=5000, debug=True)  # запускаем веб-приложение

